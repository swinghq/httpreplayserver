#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ReplayServer:server');
var http = require('http');

var config = require('../confs/conf');
/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3000');
var port = normalizePort(process.env.PORT || config.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// -----------------------------------------------------------------------------
// SHUTDOWN
// -----------------------------------------------------------------------------

var models = require('../mongodb').mongodb;

// graceful shutdown
var gracefulShutdown = function () {
    console.info('Received kill signal, shutting down gracefully.');

    server.close(function () {
        console.info('Closed out remaining connections.');

        setTimeout(function () {
            console.error('Could not close mongodb connections in time, forcefully shutting down.');
            process.exit();
        }, 5 * 1000);

        try {
            models.close();
            console.info('Closed out mongodb connections.');

        } catch (e) {
        }

        process.exit(0);
    });

    setTimeout(function () {
        console.error('Could not close connections in time, forcefully shutting down.');

        setTimeout(function () {
            console.error('Could not close mongodb connections in time, forcefully shutting down.');
            process.exit();
        }, 5 * 1000);

        try {
            models.close();
            console.info('Closed out mongodb connections.');
        } catch (e) {
        }

        process.exit();
    }, 10 * 1000);

    setTimeout(function () {
        console.error('Could not close connections in time, forcefully shutting down.');
        process.exit();
    }, 60 * 1000);
}

// listen for TERM signal e.g. kill
process.on('SIGTERM', gracefulShutdown);

// listen for INT signal e.g. Ctrl-C
process.on('SIGINT', gracefulShutdown);